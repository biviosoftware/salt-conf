#
# Default configuration for salt/jupyterhub.sls
#
# Use jupyterh_secret.py to generate passwords and (fake) OAuth keys
#
#
bivio:
  state_trees:
    jupyterhub:
      include: True
      require:
        - utilities


jupyterhub:
  host_name: localhost
  host_port: 8000
  debug: true
  authenticator_class: oauthenticator.GitHubOAuthenticator
  aux_contents: ""
{% raw %}
  config_contents: |
    import base64, os
    dockerspanwer
    from jupyter_client.localinterfaces import public_ips

    c.Authenticator.admin_users = set(['{{ pillar.jupyterhub.admin_users|join("', '") }}'])
    c.DockerSpawner.container_image = '{{ zz.jupyter_image }}'
    c.DockerSpawner.use_internal_ip = True
    {% if pillar jupyterhub.root_notebook_d %}
    c.DockerSpawner.volumes = {
        '{{ pillar.jupyterhub.root_notebook_d }}/{username}': {
            'bind': '{{ pillar.jupyterhub.notebook_d }}',
            'mode': 'Z',
        },
    }
    {% endif %}
    c.GitHubOAuthenticator.client_id = '{{ pillar.jupyterhub.github_client_id }}'
    c.GitHubOAuthenticator.client_secret = '{{ pillar.jupyterhub.github_client_secret }}'
    c.GitHubOAuthenticator.oauth_callback_url = 'https://{{ pillar.jupyterhub.host_name }}/hub/oauth_callback'
    c.JupyterHub.authenticator_class = '{{ pillar.jupyterhub.authenticator_class }}'
    c.JupyterHub.confirm_no_ssl = True
    c.JupyterHub.cookie_secret = base64.b64decode('{{ pillar.jupyterhub.cookie_secret }}')
    c.JupyterHub.hub_ip = public_ips()[0]
    c.JupyterHub.ip = '0.0.0.0'
    c.JupyterHub.proxy_auth_token = '{{ pillar.jupyterhub.proxy_auth_token }}'
    c.JupyterHub.spawner_class = dockerspawner.DockerSpawner
    {% if pillar.jupyterhub.debug %}
    c.JupyterHub.log_level = 'DEBUG'
    c.Spawner.debug = True
    c.LocalProcessSpawner.debug = True
    {% endif %}
    {{ pillar.jupyterhub.aux_contents }}
{% endraw %}


#    c.DockerSpawner.volumes = {}
